1 WSTEP - POROWNANIE IMPERATYWNEGO Z FUNKCYJNYM
1.1 - sumowanie 10 liczb w liscie imperatywnie
1.2 - sumowanie 10 liczb w liscie funkcyjnie
1.3 - wypisuje 10 poczatkowych liczb ciagu fibonaciego imperatywnie
1.4 - wypisuje 10 poczatkowych liczb ciagu fibonaciego funkcyjnie

2 SEKWENCYJNE STRUKTURY DANYCH
2.1 - wyswitla listy z losowymi liczbami i stringgami
2.2 - wlasciwosci listy, iterowanie zwykle, po indeksach itd
2.3 - konkatenacja list
2.4 - wycinanie pewnego odcinka listy
2.5 - wyszukiwanie danej wartosci na liscie
2.6 - zamiana starego elementu na nowy do listy
2.7 - wstawianie nowego elementu w okreslonym miejscu
2.8 - sortowanie listy ze stringami
2.9 - usuwanie wybranego elementu z listy
2.10 - odwracanie elementow w liscie
2.11 - sprawdzanie najmniejszej i najwiekszej wartosci na liscie
2.12 - nowa lista z liczbami od 1 do 100 i suma ich
2.13 - obliczanie sredniej z zad 2.12
2.14 - lista dwuwymiarowa - utworzenie listy 2 wymiarowej z samymi 1 na przekatnej
2.15 - lista dwuwymiarowa - 2.14 z liczbami na przekatnej od 0 do 9
2.16 - lista dwuwymiarowa - 2.14 z liczbami na DRUGIEJ PRZEKATNEJ
2.17 - lista dwuwymiarowa - 2.16 z liczbami na przekatnej od 0 do 9
2.18 - dzialania na macierzach - dodawanie 2 macierzy
2.19 - dzialania na macierzach - odejmowanie 2 macierzy
2.20 - dzialania na macierzach - mnozenie 2 macierzy
2.21 - listy skladane - znajdowanie trojek pitagorejskich w przedziale 1 do N
2.22 - listy skladane - znajdowanie czworek pitagorejskich w przedziale 1 do N
2.23 - listy skladane - znajdowanie piatek pitagorejskich w przedziale 1 do N
2.24 - pliki - zapisanie listy w pliku, odczytanie  i zsumowanie
2.25 - filtracja liczb pierwszych z listy
2.26 - to co w 2.25 tylko z funkcja lambda
2.27 - robienie listy z funkcja map()
2.28 - to co w 2.27 tylko zamiast swojej funkcji wstawiamy lambda
2.29 - obliczanie sumy wyrazenia 1+2-3+4-5+6-7
2.30 - obliczanie sumy wyrazenia 1+3+5+7+...+ (2N - 1)
2.31 - sumowanie liczb od 1 do 100 z funkcja reduce()
2.32 - obliczanie przyblizonej wartosci liczby e
2.33 - demonstracja dzialanie funkcji zip()

3 KROTKI
3.1 - pusta krotka i krotka liczb
3.2 - krotka wyrazow
3.3 - iteracja po krotce
3.4 - iteracja po krotce z indeksowaniem
3.5 - zamiana listy liczb na krotke liczb
3.6 - konkatenacja krotek
3.7 - sortowanie krotki z imionami
3.8 - krotka jako parametr funkcji(cosik nie dziala)
3.9 - rownanie kwadratowe z krotka
3.10 - obliczanie sumy krotki
3.11 - robienie krotki zagniezdzonej (macierzy)
3.12 - zapis i odczyt krotki z pliku

4 CIAGI TEKSTOWE
4.1 - iterowanie slowa
4.2 - zliczanie litery 'a' w zdaniu
4.3 - indeksowanie ciagu znakow
4.4 - wycinanie z wyrazu
4.5 - znajdowanie wyrazow w zdaniu za pomoca 'in' i 'not in'
4.6 - zastosowanie funkcji sprawdzajace zawartosc ciagu tekstowego
4.7 - zmiana malych liter na duze
4.8 - sprawdzanie czy zrobione jest mocne haslo
4.9 - iteracja po wyrazie, rosnaca i malejaca
4.10 - uzycie split(), czyli rozdielanie ciagu wyrazow spacjami
4.11 - split('/') rozdial daty na dni mies itd

5 SLOWNIK i ZBIOR
5.1 - slownik
5.2 - dodawanie i usuwanie elementow ze slownika
5.3 - metoda clear() na slowniku
5.4 - metoda get() na slowniku
5.5 - metoda items() na slowniku, iteracja po kluczach i ich wartosciach
5.6 - metoda keys() zwracanie tylko klucza
5.7 - metoda pop() zwraca wartosc danego klucza, po tym usuwa ta pare klucz-wartosc ze slownika
5.8 - metoda values() zwraza wartosci kluczy
5.9 - zbiory - nowy zbior, dodawanie elementow i czyszczenie zbioru
5.10 - suma dwoch zbiorow metoda union()
5.11 - roznica dwoch zbiorow metoda difference()
5.12 - iloczyn dwoch zbiorow metoda intersection()
5.13 - roznica symetryczna dwoch zbiorow (czyli reszta po operacji iloczynu) metoda symmetric_difference()
5.14 - SERIALIZACJA zbioru do pliku binarnego i wczytywanie zbioru z tegoz pliku

6 WYBRANE MODULY PROGRAMOWANIA FUNKCYJNEGO
6.1 - modul operator - mnozenie elementow listy operator.mul
6.2 - modul operator - dodawanie elementow listy operator.add
6.3 - modul itertools - funkcja count() zamist funkcji range()
6.4 - modul itertools - funkcja cycle() wypisywanie po kolei wartosci z kontenera
6.5 - modul itertools - funkcja repeat() wypisywanie zadanej ilosci powtorzen
6.6 - modul itertools - iterator product(lista,druga_lista) - obliczanie iloczynu kartezjanskiego, kazda mozliwa kombinacja, bierze pod uwage wartosci
6.7 - modul itertools - iterator permutations(lista) - sprawdza permutacje, bierze pod uwage pozycje danego elementu w liscie, nie wartosc
6.8 - modul itertools - iterator combinations(lista,liczba_obiektow) - kombinacje elementow ale bez powtorzen konkretnego elementu
6.9 - modul itertools - iterator combinations_with_replacement(lista,liczba_obiektow) - kombinacje z powtorzeniami elementow
6.10 - modul itertools - iterator skonczony - accumulate(lista, funkcja) - najpierw wykonuje funkcje dla 2 pierwszych elementow, potem dla tego wyniku i 3 elementu itd
6.11 - modul functools porownanie dzialania funkcji accumulate()[zwraca wyniki posrednie] i reduce()[zwraca sam wynik koncowy]
6.12 - modul itertools - funkcja chain(lista, lista) - laczy szeregowo elementy z iteratorow
6.13 - to samo co 6.12 tylko wiecej argumentow w funkcji
6.14 - modul itertools - funkcja compress(lista, lista_boolean) - w drugim arg dajemy warunek
6.15 - modul itertools - funkcja dropwhile(funkcja, lista) - jesli dana funkcja zwroci false to wtedy tylko wypisuje reszte elementow z listy
6.16 - modul itertools - funkcja filterfalse(funkcja, lista) - zwraca obiekt jesli funkcja zwroci false
6.17 - modul itertools - funkcja islice(iterator,od,do,co_ile) - wycina z listy zadane elementy
6.18 - modul itertools - funkcja takewhile(funkcja, lista) - zwraca elementy do czasu gdy dostanie false od funkcji

7 FUNKCJE REKURENCYJNE I REKURENCJA OGNOWA
7.1 - rekurencyjne dodawanie dwuch liczb
7.2 - rekurencyjne przeszukiwanie listy
7.3 - wyszukiwanie binarne na posortowanej liscie