""" stringi """ - duzy napis z uwzglednieniem nowej linii
''' string ''' - to samo co powyzej
sum() - sumnuje
string[:1] + '.' + string[1:] - wstawia kropke w srodek stringa
list(range(1,10,2)) - robi liste [1,3,5,7,9]
cokolwiek in lista - sprawdza czy wartosc 'cokolwiek' znajduje sie na liscie
lista.append(element) - dodaje nowy element do listy
lista.index(elemnet) - zwraca indeks danego elementu w liscie
lista.insert(index,element) - wstawaianie elementu w podanym miejscu (ale nie usuwanie starego)
lista.sort() - sortuje elementy rosnaco
lista.remove(element) - usuwa elemnet
lista.reverse() - odwraca kolejnosc elemento na liscie
max(lista)/min(lista) - znajduje najwieksza / najmniejsza wartosc na liscie
tablica = [[0 for i in range(N)] for j in range(N)] - generator tworzy macierz o wymiarze NxN apelniona zeramiz
list( filter (nasza_funkcja,range(1,10) ) ) - generuje liste na podstawie filtra ktora jest nasza funkcja w podanym przedziale (2.26)
list( map (nasza_funkcja,range(1,10) ) ) - generuje liste ale stosuje funkcje dla kazdego elementu w podanym przedziale (2.27)
reduce() - np functools.reduce(nasza_funkcja, range()) - wykonuje funkcje, dodaje jej wynik do jej nastepnego wyniku (2.31)
zip(lista1,lista2) - z list robi krotki

--------CIAGI TEKSTOWE----------
sentence.isalnum() - alfanumeryczny
sentence.isdigit() - liczby
sentence.isalpha() - tylko znaki alfabetu
sentence.isspace() - tylko biale znaki
sentence.islower() - male litery
sentence.isupper() - duze litery
tekst.spli() - rozdzielenie ciagu tekstowego przez to co podamy jako argument

--------SLOWNIKI----------
slownik.clear() - usuwa zawartosc
slownik.get("index","w razie jak nie bedzie") - jesli klucz 'index' istnieje to zwraca wartosc klucza, jak nie ma to zwraca drugi parametr
slownik.items() - zwraca klucz i wartosc w postaci sekwencji krotek
slownik.keys() - zwracanie tylko klucza slownika
slownik.pop() - zwraca wartosc danego klucza, po tym usuwa ta pare klucz-wartosc ze slownika

--------ZBIORY--------------
set() - utworzenie pustego zbioru
zbior.add(cos) - dodaje pojedynczy element cos do zbioru
zbior.update([a,b,c,d]) - dodawanie wiekszej ilosci rzeczy do zbioru
zbior.union() - dodawanie dwoch zbiorow
zbior.difference() - odejmowanie dwoch zbiorow
intersection() - iloczyn dwoch zbiorow
symmetric_difference() - pozostalosc po iloczynie - to co nie jest czescia wspolna zbiorow

--------MODULY--------------
operator - dodaje typowe funkcje operacji matematycznych np operator.add(a,b), operator.sub(a,b),operator.mul(a,b)
itertools.count(start,krok) - iterator nieskonczony jak range() ale bez gornej granicy, ustalamy tylko poczatek i krok
itertools.cycle(lista lub krotka lub slownik) - iteruje w kolo po kolejnych wartosciach w kontenerze
itertools.repeat(co_powtarzac , ile_razy) - iteruje ta sama wartosc zadana ilosc razy
